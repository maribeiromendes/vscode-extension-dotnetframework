import * as vscode from 'vscode';

export class OpenTestFilesProvider {
    private file: any;

    constructor(file: any) {
        this.file = file;
    }

    async openTestFile() {
        try {
            const document = await vscode.workspace.openTextDocument(this.file);
            await vscode.window.showTextDocument(document);
        } catch (error) {
            vscode.window.showErrorMessage(`❌ Failed to open test file: ${this.file}`);
            console.error(error);
        }
    }

    async openTestMethod() {
        if (!this.file || !this.file.command.arguments[1] || typeof this.file.command.arguments[3] !== 'number') {
            vscode.window.showErrorMessage(`❌ Invalid test method context received.`);
            console.error("Received testItem:", this.file);
            return;
        }

        try {
            const filePath = this.file.command.arguments[1];
            const lineNumber = this.file.command.arguments[3];

            const document = await vscode.workspace.openTextDocument(filePath);
            const editor = await vscode.window.showTextDocument(document);
            const position = new vscode.Position(Math.max(0, lineNumber - 1), 0);
            editor.selection = new vscode.Selection(position, position);
            editor.revealRange(new vscode.Range(position, position), vscode.TextEditorRevealType.InCenter);
        } catch (error) {
            vscode.window.showErrorMessage(`❌ Failed to open test file: ${this.file}`);
            console.error(error);
        }
    }
}